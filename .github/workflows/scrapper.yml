name: Scrapper CI

on:
  push:
    branches:
      - 'main'
    paths:
      - 'scrapper/**'
      - '.github/workflows/scrapper.yml'

env:
  REGISTRY: 'ghcr.io'
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: 'scrapperapp:latest'

jobs:
  checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build with Maven
        run: mvn checkstyle:check -pl scrapper -am
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build with Maven
        run: mvn package -pl scrapper -am
      - name: Login with Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build -t ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }} . -f scrapper/Dockerfile
      - name: Push image
        run: docker push ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            echo "Logging in to Docker registry"
            echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ env.USERNAME }} --password-stdin ${{ env.REGISTRY }}

            echo "Stopping and removing old container"
            docker stop ${{ env.IMAGE_NAME }}
            docker rm ${{ env.IMAGE_NAME }}

            echo "Copying Docker Compose file to the remote machine"
            echo "${{ secrets.SSHKEY }}" > key.pem
            scp -i key.pem /scrapper/docker-compose.yml ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST }}:/scrapper

            echo "Deploying Docker Compose on the remote machine"
            cd /scrapper && docker-compose up -d

            echo "Running a new container from the new image"
            docker run -d \
            --restart always \
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}
